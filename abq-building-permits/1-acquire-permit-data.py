#! /usr/bin/env python
# -*- coding: utf-8 -*-

from urllib.request import urlretrieve
import csv
import os
import logging
import locale
import datetime
from operator import itemgetter
from datetime import timedelta
import pandas as pd
import pytz

logger = logging.getLogger("root")
logging.basicConfig(
    format="\033[1;36m%(levelname)s: %(filename)s (def %(funcName)s %(lineno)s): \033[1;37m %(message)s",
    level=logging.DEBUG,
)

"""
Each Sunday evening, this script pulls down a copy of the
abq csv of building permits which is updated nightly
"""


class BuildingPermitRequest(object):

    request_headers = {
        "From": "ckeller@bizjournals.com",
        "User-Agent": "Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US) \
            AppleWebKit/525.19 (KHTML, like Gecko) Chrome/1.0.154.53 Safari/525.19",
    }

    dir_current = os.path.dirname(os.path.realpath(__file__))

    target_url = (
        "http://data.cabq.gov/business/buildingpermits/BuildingPermitsCABQ-en-us.csv"
    )

    timestamp = datetime.datetime.now().strftime("%Y-%m-%d")

    pacific = pytz.timezone("US/Mountain")

    utc = pytz.UTC

    my_range = datetime.datetime.now() - timedelta(days=7)

    file_output = "_abq-building-permits.csv"

    file_saved = os.path.join(dir_current, file_output)

    output_csv = os.path.join(
        dir_current,
        "week-of-{0}-abq-weekly-commerical-permits.{1}".format(
            my_range.strftime("%Y-%m-%d"), "csv"
        ),
    )

    output_file = os.path.join(
        dir_current,
        "week-of-{0}-abq-weekly-commerical-permits.{1}".format(
            my_range.strftime("%Y-%m-%d"), "txt"
        ),
    )

    csv_columns = [
        "proper_date",
        "permit_date",
        "owner_name",
        "combined_address",
        "contractor_name",
        "type_of_work",
        "int_sq_feet",
        "int_valuation",
        "currency_valuation",
        "ApplicationPermitNumber",
        "CommercialorResidential",
        "TypeofWork",
        "SiteNumber",
        "SiteStreet",
        "SiteStreetType",
        "SiteStreetDirectional",
        "SiteZip",
        "Lot",
        "Block",
        "Subdivision",
        "TotalSquareFeet",
        "PlanCheckValuation",
        "OwnerName",
        "ContractorName",
        "IssueDate",
        "NumberOfUnits",
    ]

    target_data = []

    headline = (
        "Here are the commercial building permits issued in Albuquerque last week\n\n"
    )

    caveat = "\nThis story was automatically generated by a computer application and is based on public records made available by the city of Albuquerque Planning Department. The application retrieves a spreadsheet of building permits each Sunday. Data in the spreadsheet is entered by planning department staff and via an online permit application system. Albuquerque Business First Managing Editor Chris Keller reviews the data before it is published. Estimated cost is calculated by the building department and is based on a formula that takes into account the square footage of the project, labor costs and materials. During the week of Aug. 17, 2020, a change in the available data removed details about the type of work being done. That change is reflected here."

    def handle(self, *args, **kwargs):
        # download the file
        # self.get_data(self.target_url, self.file_saved)

        # open the downloaded file
        with open(self.file_saved, newline="", encoding="utf-16") as file:
            data = csv.DictReader(file, delimiter="\t")
            self._process(data)
            if len(self.target_data) > 0:
                sorted_data = sorted(
                    self.target_data,
                    key=itemgetter("proper_date"),
                    reverse=True,
                )
                df = self.create_pandas_dataframe(sorted_data, self.csv_columns)
                largest_size = df.loc[df["int_sq_feet"].idxmax()]
                largest_value = df.loc[df["int_valuation"].idxmax()]
                self._write(largest_size, largest_value, sorted_data)

    def get_data(self, request_url, downloaded_file):
        logger.debug("retrieving csv of building permits")
        urlretrieve(request_url, downloaded_file)

    def _process(self, data):
        logger.debug("processing the data")
        locale.setlocale(locale.LC_ALL, "en_US.utf-8")
        for item in data:
            item_date = datetime.datetime(
                int(item["IssueDate"][0:4]),
                int(item["IssueDate"][4:6]),
                int(item["IssueDate"][6:]),
            )
            item["proper_date"] = item_date
            if (
                item_date > self.my_range
                and item["CommercialorResidential"] == "Commercial"
            ):
                item["permit_date"] = item["proper_date"].strftime("%b %d, %Y")
                item["owner_name"] = item["OwnerName"].title()
                item["st_ap_style"] = self.st_ap_style(item["SiteStreetType"])
                item["combined_address"] = "{0} {1} {2} {3}".format(
                    item["SiteNumber"],
                    item["SiteStreet"].title(),
                    item["st_ap_style"],
                    item["SiteStreetDirectional"],
                )
                item["contractor_name"] = self.cont_ap(item["ContractorName"])
                item["TypeofWork"] = self.cont_work_type(item["TypeofWork"])
                item["int_sq_feet"] = round(float(item["TotalSquareFeet"]))
                item["int_valuation"] = float(item["PlanCheckValuation"])
                if item["int_valuation"] > 0:
                    item["currency_valuation"] = locale.currency(
                        item["int_valuation"], grouping=True
                    )
                else:
                    item["currency_valuation"] = None
                self.target_data.append(item)

    def _write(self, largest_size, largest_value, sorted_data):
        logger.debug("writing the story")
        output = ""
        output += self.headline
        output += "The city of Albuquerque issued {0} commercial building permits over the past seven days.\n\n".format(
            len(sorted_data)
        )
        output += self.size_graf(largest_size)
        output += self.cost_graf(largest_value)
        output += "Among the other commercial building permits issued:\n"
        for item in sorted_data:
            if (
                item["ApplicationPermitNumber"]
                == largest_size["ApplicationPermitNumber"]
                or item["ApplicationPermitNumber"]
                == largest_value["ApplicationPermitNumber"]
            ):
                pass
            else:
                message = "{owner_name} received a permit on {permit_date} for {TypeofWork} at {combined_address}. The work will be done by {contractor_name}.".format(
                    **item
                )
                if item["int_sq_feet"] > 0:
                    message += " The project is estimated to be about {int_sq_feet:,d} square feet.".format(
                        **item
                    )
                if item["currency_valuation"]:
                    message += " The estimated cost of the work is about {currency_valuation}.".format(
                        **item
                    )
                output += "\nâ€¢ {}\n".format(message)
        output += self.caveat
        with open(self.output_file, "w") as f:
            print(output, file=f)

    def create_pandas_dataframe(self, list, column_names):
        output = pd.DataFrame(list, columns=column_names)
        output.to_csv(self.output_csv, encoding="utf-8")
        return output

    def size_graf(self, item):
        output = ""
        output += "The permit for the largest project in terms of square footage was issued on {permit_date} to {owner_name} for {TypeofWork} at {combined_address}.".format(
            **item
        )
        if item["int_sq_feet"] > 0:
            output += " The project is estimated to be about {int_sq_feet:,d} square feet.".format(
                **item
            )
        if item["currency_valuation"]:
            output += " The estimated cost of the work is about {currency_valuation}. ".format(
                **item
            )
        output += "The work will be done by {contractor_name}.\n\n".format(**item)
        return output

    def cost_graf(self, item):
        output = ""
        output += "The permit for the largest project in terms of estimated cost was issued on {permit_date} to {owner_name} for {TypeofWork} at {combined_address}.".format(
            **item
        )
        if item["int_sq_feet"] > 0:
            output += " The project is estimated to be about {int_sq_feet:,d} square feet.".format(
                **item
            )
        if item["currency_valuation"]:
            output += " The estimated cost of the work is about {currency_valuation}. ".format(
                **item
            )
        output += "The work will be done by {contractor_name}.\n\n".format(**item)
        return output

    def st_ap_style(self, street):
        if street == "RD":
            output = "Road"
        elif street == "ST":
            output = "St."
        elif street == "BLVD":
            output = "Blvd."
        elif street == "AV":
            output = "Ave."
        elif street == "CT":
            output = "Ct."
        elif street == "PL":
            output = "Pl."
        elif street == "FKWY":
            output = "Fwy."
        else:
            output = ""
        return output

    def cont_ap(self, contractor):
        inpt = contractor.title().replace("Inc.", "Inc")
        if "Inc" in inpt:
            output = inpt.replace(", Inc", " Inc").replace(" Inc", " Inc.")
        elif ", Llc" in inpt:
            output = inpt.replace(", Llc", ", LLC")
        elif "Company" in inpt:
            output = inpt.replace("Company", "Co.")
        elif "Corporation" in inpt:
            output = inpt.replace("Corporation", "Corp.")
        else:
            output = inpt
        return output

    def cont_work_type(self, string):
        inpt = string
        if "Alterations" in inpt:
            output = inpt.replace("Alterations", "alterations")
        elif "Solar Under 10KW - Roof Mounted" in inpt:
            output = inpt.replace(
                "Solar Under 10KW - Roof Mounted", "a roof mounted solar project"
            )
        elif "Wall - Site Wall > 6ft" in inpt:
            output = inpt.replace("Wall - Site Wall > 6ft", "a site wall")
        elif "Minor Alteration/Repair" in inpt:
            output = inpt.replace(
                "Minor Alteration/Repair", "minor alterations or repairs"
            )
        elif "Addition" in inpt:
            output = inpt.replace("Addition", "an addition")
        elif "Foundation" in inpt:
            output = inpt.replace("Foundation", "a foundation")
        elif "Change of Use" in inpt:
            output = inpt.replace("Change of Use", "a change of use project")
        elif "Sign - Commercial Sign" in inpt:
            output = inpt.replace("Sign - Commercial Sign", "a commercial sign")
        elif "New Building" in inpt:
            output = inpt.replace("New Building", "a new building")
        else:
            output = inpt
        return output.lower()


if __name__ == "__main__":
    task_run = BuildingPermitRequest()
    task_run.handle()
